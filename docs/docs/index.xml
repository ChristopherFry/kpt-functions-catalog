<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kpt Functions Catalog – Docs</title>
    <link>https://googlecontainertools.github.io/kpt-functions-catalog/docs/</link>
    <description>Recent content in Docs on Kpt Functions Catalog</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://googlecontainertools.github.io/kpt-functions-catalog/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: </title>
      <link>https://googlecontainertools.github.io/kpt-functions-catalog/docs/helm-template/usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://googlecontainertools.github.io/kpt-functions-catalog/docs/helm-template/usage/</guid>
      <description>
        
        
        &lt;h1 id=&#34;using-helm-template&#34;&gt;Using helm-template&lt;/h1&gt;
&lt;p&gt;Kpt packages are just configuration so any solution, like the &lt;code&gt;helm template&lt;/code&gt; command, which emits configuration can also be used to generate kpt packages. The &lt;code&gt;helm-template&lt;/code&gt; kpt function generates a new kpt package from a local Helm chart or upserts Helm chart configuration to an existing kpt package. In the context of a pipeline, these packages can then be further customized using other kpt functions.&lt;/p&gt;
&lt;h2 id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;
&lt;h3 id=&#34;example-1-hello-world&#34;&gt;Example 1: Hello World&lt;/h3&gt;
&lt;h4 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Install kubectl and have an appropriate kubeconfig entry to your Kubernetes cluster.&lt;/li&gt;
&lt;li&gt;Install kpt.&lt;br&gt;
&lt;code&gt;$ gcloud components install kpt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Install helm.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;steps&#34;&gt;Steps&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create a new helm chart called &amp;ldquo;helloworld-chart&amp;rdquo;.&lt;br&gt;
&lt;code&gt;$ helm create helloworld-chart&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;helm-template&lt;/code&gt; to expand &amp;ldquo;helloworld-chart&amp;rdquo; using name &amp;ldquo;my-first-example&amp;rdquo; and see the configuration in a ResourceList.&lt;br&gt;
&lt;code&gt;$ docker run -v $(pwd):/source gcr.io/kpt-functions/helm-template chart_path=/source/helloworld-chart name=my-first-example&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Save the expanded configuration locally as yaml files by piping through &lt;code&gt;kpt fn sink&lt;/code&gt;.&lt;br&gt;
&lt;code&gt;$ mkdir helloworld-configs&lt;/code&gt;
&lt;code&gt;$ docker run -v $(pwd):/source gcr.io/kpt-functions/helm-template chart_path=/source/helloworld-chart name=my-first-example |&lt;/code&gt;&lt;br&gt;
  &lt;code&gt;kpt fn sink helloworld-configs&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;example-2-expand-and-apply-multiple-charts-to-a-cluster&#34;&gt;Example 2: Expand and apply multiple charts to a cluster&lt;/h3&gt;
&lt;h4 id=&#34;prerequisites-1&#34;&gt;Prerequisites&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Install kubectl and have an appropriate kubeconfig entry to your Kubernetes cluster.&lt;/li&gt;
&lt;li&gt;Install kpt.&lt;br&gt;
&lt;code&gt;$ gcloud components install kpt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Install helm.&lt;/li&gt;
&lt;li&gt;Download the helm charts for this example to your filesystem or use your own.&lt;br&gt;
&lt;code&gt;$ helm repo add bitnami https://charts.bitnami.com/bitnami&lt;/code&gt;&lt;br&gt;
&lt;code&gt;$ helm pull bitnami/mongodb --untar&lt;/code&gt;&lt;br&gt;
&lt;code&gt;$ helm pull bitnami/redis --untar&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;steps-1&#34;&gt;Steps&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;helm-template&lt;/code&gt; on each of the charts you need. You can pipe these commands, as shown below. The following commands expand the mongodb and redis charts and store the resulting yaml into a new output directory.&lt;br&gt;
&lt;code&gt;$ mkdir output&lt;/code&gt;&lt;br&gt;
&lt;code&gt;$ docker run -v $(pwd):/source gcr.io/kpt-functions/helm-template chart_path=/source/mongodb name=my-mongodb |&lt;/code&gt;&lt;br&gt;
  &lt;code&gt;docker run -i -v $(pwd):/source gcr.io/kpt-functions/helm-template name=my-redis chart_path=/source/redis |&lt;/code&gt;&lt;br&gt;
  &lt;code&gt;kpt fn sink output&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;See a summary of the output using &lt;code&gt;kpt config tree&lt;/code&gt;.&lt;br&gt;
&lt;code&gt;$ kpt fn source output |&lt;/code&gt;&lt;br&gt;
  &lt;code&gt;kpt config tree&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Apply these configs to a kubernetes cluster.&lt;br&gt;
&lt;code&gt;$ kubectl apply -R -f output&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;faqs&#34;&gt;FAQs&lt;/h2&gt;
&lt;h3 id=&#34;how-can-i-set-arbitrary-values-in-my-chart-using---set&#34;&gt;How can I set arbitrary values in my chart using &lt;code&gt;--set&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;We recommend that you create a new values.yaml file with the values you want so you can check the new file into a version-controlled repository. You can specify an optional &lt;code&gt;values_path&lt;/code&gt; argument to the helm-template command containing the relative path to your new file.&lt;br&gt;
&lt;code&gt;$ docker run -v $(pwd)/charts/bitnami:/source gcr.io/kpt-functions/helm-template chart_path=/source/redis name=my-redis&lt;/code&gt; &lt;strong&gt;&lt;code&gt;values_path=/source/redis/values-production.yaml&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
